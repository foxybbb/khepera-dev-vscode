/*--------------------------------------------------------------------
 * koreio.c - KoreBot Library - KoreIO Support
 *--------------------------------------------------------------------
 * $Id: koreio.c,v 1.2 2005/01/20 08:41:54 pbureau Exp $
 *--------------------------------------------------------------------	
 *         
 * $Author: pbureau $
 * $Date: 2005/01/20 08:41:54 $
 * $Revision: 1.2 $
 *--------------------------------------------------------------------*/

#include "khepera.h"

/*! 
 * \file   koreio.c Support for the KoreIO board.             
 *
 * \brief 
 *         This module provides useful API to use a 
 *         KoreIO from a KoreBot program.
 *
 * \author   Pierre Bureau (K-Team SA)
 *           Frédéric Lambercy (K-Team SA)
 * 
 * \note     Copyright (C) 2004 K-TEAM SA
 * \bug      none discovered.                                         
 * \todo     nothing.
 */

/*--------------------------------------------------------------------*/
/*! 
 * This function get the firmware version and revision number.
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param version  A pointer to a variable that will receive the 
 *                 firmware version number.
 */
void kio_GetFWVersion( knet_dev_t * dev , 
			unsigned int * version )
{
  unsigned char val;

  knet_read8( dev , KIO_FWVersion, &val );
  *version  = val;
}


/*--------------------------------------------------------------------*/
/*! 
 * Read an Analog input level. The 10 bit value, as well as the corresponding
 * timestamp are returned. The timestamp is given is mS since the last reset of
 * the timer.
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param an	   The analog input to read
 * \param value	   Pointer to store the 10bit value from the A/D
 * \param time     Pointer to store the 32bit value of the timestamp
 *
 * \return 
 * 	- 0 if succesful
 * 	- -1 if the given Analog is invalid
 * 	- -2 in case of knet transfer failure
 */
int kio_ReadAnalog(knet_dev_t * dev, unsigned int an, uint16_t *value, uint32_t *time)
{
  char addr;
  char buf[6];
  char * ptr;
  int i;
  
  if(an > 11)
    return -1;

  addr = KIO_ANReadBase + (an * 6);

  if (knet_lltransfer( dev, &addr, 1, buf, 6) < 0)
    return -2;

  ptr = (char*)value;
  ptr[0] = buf[1];
  ptr[1] = buf[0];

  ptr = (char*)time;
  ptr[0] = buf[5];
  ptr[1] = buf[4];
  ptr[2] = buf[3];
  ptr[3] = buf[2];

  return 0;
}

/*--------------------------------------------------------------------*/
/*!
 * Change a analog output value
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param an 	   the output to set (0-7)
 * \param value	   the analog value (0-255)
 *
 * \return
 * 	- 0 if succesful
 * 	- -1 if the given output is invalid
 */

int kio_SetANValue(knet_dev_t * dev, unsigned int an, unsigned int value)
{
  char addr;

  if(an > 7)
    return -1;

  addr = KIO_ANWriteBase + an;

  knet_write8(dev, addr, value);

  return 0;
}
  
/*--------------------------------------------------------------------*/
/*! 
 * Configure a digital IO to be used as an input, output or PWM ouput
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the io to set (0-15)
 * \param config   the mode to set (0: input)
 *                                 (1: ouput)
 *                                 (2: pwm)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given io is invalid
 *       - -2 if the given config is invalid
 */

int kio_ConfigIO(knet_dev_t * dev, unsigned io, unsigned config)
{
  if(io > 15)
    return -1;

  switch(config)
  {
    case 0 :
      knet_write8(dev , KIO_IOConfigIn, io);
      break;
    case 1 :
      knet_write8(dev , KIO_IOConfigOut, io);
      break;
    case 2 :
      knet_write8(dev , KIO_IOConfigPwm, io);
      break;
    default:
      return -2;
      break;
  }
  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Read a digital IO state 
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the io to read (0-15)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given io is invalid
 *       - -2 if the given io is not in input mode
 */
int kio_ReadIO(knet_dev_t * dev, unsigned int io)
{
  char val;
 
  if(io > 15)
    return -1;

  knet_read8(dev , KIO_IOReadBase + io, &val);

  if(val == 2)
    return -2;
  else
    return val;
}

/*--------------------------------------------------------------------*/
/*! 
 * Set a digital IO state to 1
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the io to set (0-15)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given io is invalid
 *       - -2 if the given io is not in output mode
 */
int kio_SetIO(knet_dev_t * dev, unsigned int io)
{
  if(io > 15)
    return -1;

  knet_write8(dev , KIO_IOSetBase, io);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Change the state of the LED
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param state    The LED state is 0 to switch it off 
 *                                  1 to switch it on
 *                                  2 to changed it
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given state is invalid
 */
int kio_ChangeLed(knet_dev_t * dev, unsigned state)
{
  char addr;
  
  if(state > 2)
    return -1;

  addr = KIO_IOChgLed + state;
  knet_write8(dev , KIO_IOChgLed, 16);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Change the state of a digital IO 
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the io to reset (0-15)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given io is invalid
 *       - -2 if the given io is not in output mode
 */
int kio_ChangeIO(knet_dev_t * dev, unsigned int io)
{
  if(io > 15)
    return -1;

  knet_write8(dev , KIO_IOChgBase, io);

  return 0;
}
/*--------------------------------------------------------------------*/
/*! 
 * Set a digital IO state to 0
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the io to reset (0-15)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given io is invalid
 *       - -2 if the given io is not in output mode
 */
int kio_ClearIO(knet_dev_t * dev, unsigned int io)
{
  if(io > 15)
    return -1;

  knet_write8(dev , KIO_IOClearBase, io);

  return 0;
}

/*-------------------------------------------------------------------*/
/*!
 * Change PWM channel ratio
 *
 * \param dev      K-Net Device Descriptor to the KoreIo
 * \param io 	   the io to modify PWM ratio 
 * \parama ratio   the ratio value
 *
 * \return 
 * 	- 0 if succesful
 * 	- -1 if the given io is invalid 
 */
int kio_ChangePWM_ratio(knet_dev_t * dev, unsigned int io, unsigned int ratio)
{
  char addr;
  
  if (io > 15)
    return -1;
  
  addr = KIO_PWMRatio + io;
  knet_write8(dev, addr,  ratio);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Change the state of a power output 
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the power output to set (0-6)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given pw is invalid
 */
int kio_ChangePW(knet_dev_t * dev, unsigned int io)
{
  if(io > 6)
    return -1;

  knet_write8(dev , KIO_PWChgBase, io);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Set a power output state to 1
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the power output to set (0-6)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given pw is invalid
 */
int kio_SetPW(knet_dev_t * dev, unsigned int io)
{
  if(io > 6)
    return -1;

  knet_write8(dev , KIO_PWSetBase, io);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Set a power output state to 0
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param io       the power output to reset (0-6)
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given pw is invalid
 */
int kio_ClearPW(knet_dev_t * dev, unsigned int io)
{
  if(io > 6)
    return -1;

  knet_write8(dev , KIO_PWClearBase, io);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Handle the koreio timer for analog measurements timestamp.
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param action   The action to perform with the timer
 *                     0: Reset the timer
 *                     1: Stop the timer
 *                     2: Launch the timer
 * 
 * \return 
 * 	 - 0 if succesful
 *       - -1 if the given action is invalid
 */
int kio_Timer(knet_dev_t * dev, unsigned action)
{
  if(action > 2)
    return -1;

  knet_write8(dev , KIO_TimerBase, action);

  return 0;
}

/*--------------------------------------------------------------------*/
/*! 
 * Start an address scan on the secondary I2C bus.
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 */
void kio_i2c_StartScan(knet_dev_t * dev)
{
  knet_write8(dev, KIO_I2CScan, 1);
}

/*--------------------------------------------------------------------*/
/*! 
 * Return the list of answering devices from a scan on the secondary I2C bus.
 * The scan must be started using kio_i2c_StartScan.
 *
 * \param dev      K-Net Device Descriptor to the KoreIO
 * \param list     A pointer to an array of characters to store the list. 
 *                 The array must be large enough to store all the addesses (up
 *                 to 128bytes).
 *
 * \return the number of answering devices                
 *      - -1 if the given pointer is null
 *      - -2 in case of knet transfer failure
 */
int kio_i2c_ListScan(knet_dev_t * dev, char * list)
{
  unsigned char val;
  char addr;
  int len;

  if(!list)
    return -1;
  

  knet_read8( dev , KIO_I2C_ScanRead, &val );
  len  = val;
  addr = KIO_I2CList;

  if (knet_lltransfer( dev, &addr, 1, list, len) < 0)
    return -2;
  
  return val;
}
